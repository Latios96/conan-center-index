diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4465c824c..7b23fb444 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -140,7 +140,7 @@ message(STATUS "Setting Namespace to: ${PROJ_NAMESPACE_V}")
 add_definitions (-DOIIO_INTERNAL=1)

 list (APPEND CMAKE_MODULE_PATH
-      "${PROJECT_SOURCE_DIR}/src/cmake/modules"
+      #"${PROJECT_SOURCE_DIR}/src/cmake/modules"
       "${PROJECT_SOURCE_DIR}/src/cmake")

 include (GNUInstallDirs)
@@ -220,7 +220,7 @@ if (OIIO_BUILD_TOOLS AND NOT BUILD_OIIOUTIL_ONLY)
     add_subdirectory (src/iinfo)
     add_subdirectory (src/maketx)
     add_subdirectory (src/oiiotool)
-    add_subdirectory (src/testtex)
+    #add_subdirectory (src/testtex)
     add_subdirectory (src/iv)
 endif ()

diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 48e871418..251e9af28 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -48,11 +48,11 @@ endif ()
 if (MSVC)
     # Not linking Boost as static libraries: either an explicit setting or LINKSTATIC is FALSE:
     if (NOT Boost_USE_STATIC_LIBS)
-        add_definitions (-DBOOST_ALL_DYN_LINK=1)
+        #add_definitions (-DBOOST_ALL_DYN_LINK=1)
     endif ()
 endif ()

-set (Boost_COMPONENTS thread)
+set (Boost_COMPONENTS filesystem system thread container)
 if (NOT USE_STD_FILESYSTEM)
     list (APPEND Boost_COMPONENTS filesystem)
 endif ()
@@ -104,9 +104,9 @@ checked_find_package (OpenEXR REQUIRED
 # install version of 2.x.
 include_directories(BEFORE ${IMATH_INCLUDES} ${OPENEXR_INCLUDES})
 if (MSVC AND NOT LINKSTATIC)
-    add_definitions (-DOPENEXR_DLL) # Is this needed for new versions?
+    #add_definitions (-DOPENEXR_DLL) # Is this needed for new versions?
 endif ()
-if (OPENEXR_VERSION VERSION_GREATER_EQUAL 3.0)
+if (OpenEXR_VERSION VERSION_GREATER_EQUAL 3.0)
     set (OIIO_USING_IMATH 3)
 else ()
     set (OIIO_USING_IMATH 2)
@@ -198,7 +198,7 @@ checked_find_package (GIF
                       RECOMMEND_MIN_REASON "for stability and thread safety")

 # For HEIF/HEIC/AVIF formats
-checked_find_package (Libheif VERSION_MIN 1.3
+checked_find_package (libheif VERSION_MIN 1.3
                       RECOMMEND_MIN 1.7
                       RECOMMEND_MIN_REASON "for AVIF support")
 if (APPLE AND LIBHEIF_VERSION VERSION_GREATER_EQUAL 1.10 AND LIBHEIF_VERSION VERSION_LESS 1.11)
@@ -275,13 +275,13 @@ macro (find_or_download_robin_map)
     # for an installed version. Still prefer a copy that seems to be
     # locally installed in this tree.
     if (NOT BUILD_ROBINMAP_FORCE)
-        find_package (Robinmap QUIET)
+        find_package (tsl-robin-map REQUIRED)
     endif ()
     # If an external copy wasn't found and we requested that missing
     # packages be built, or we we are forcing a local copy to be built, then
     # download and build it.
     # Download the headers from github
-    if ((BUILD_MISSING_ROBINMAP AND NOT ROBINMAP_FOUND) OR BUILD_ROBINMAP_FORCE)
+    if ((BUILD_MISSING_ROBINMAP AND NOT tsl-robin-map_FOUND) OR BUILD_ROBINMAP_FORCE)
         message (STATUS "Downloading local Tessil/robin-map")
         set (ROBINMAP_INSTALL_DIR "${PROJECT_SOURCE_DIR}/ext/robin-map")
         set (ROBINMAP_GIT_REPOSITORY "https://github.com/Tessil/robin-map")
@@ -299,7 +299,7 @@ macro (find_or_download_robin_map)
         endif ()
         set (ROBINMAP_INCLUDE_DIR "${ROBINMAP_INSTALL_DIR}/include")
     endif ()
-    checked_find_package (Robinmap REQUIRED)
+    checked_find_package (tsl-robin-map REQUIRED)
 endmacro()


diff --git a/src/include/CMakeLists.txt b/src/include/CMakeLists.txt
index 52b0936a6..611eadb4e 100644
--- a/src/include/CMakeLists.txt
+++ b/src/include/CMakeLists.txt
@@ -65,14 +65,15 @@ install (FILES ${detail_headers}
          COMPONENT developer)

 if (INTERNALIZE_FMT OR OIIO_USING_FMT_LOCAL)
+    set(FMT_INCLUDES "${fmt_INCLUDE_DIR}")
     set (fmt_headers
          ${FMT_INCLUDES}/fmt/core.h
          ${FMT_INCLUDES}/fmt/format-inl.h
          ${FMT_INCLUDES}/fmt/format.h
          ${FMT_INCLUDES}/fmt/ostream.h
          ${FMT_INCLUDES}/fmt/printf.h )
-    file (COPY ${fmt_headers}
-          DESTINATION ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
+    #file (COPY ${fmt_headers}
+    #      DESTINATION ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt)
 else ()
     set (fmt_headers
          ${CMAKE_BINARY_DIR}/include/OpenImageIO/detail/fmt/format.h
diff --git a/src/include/OpenImageIO/detail/fmt.h b/src/include/OpenImageIO/detail/fmt.h
index f0cfcb300..1958d824e 100644
--- a/src/include/OpenImageIO/detail/fmt.h
+++ b/src/include/OpenImageIO/detail/fmt.h
@@ -38,9 +38,9 @@ OIIO_PRAGMA_WARNING_PUSH
 #    pragma GCC diagnostic ignored "-Wtautological-constant-compare"
 #endif

-#include <OpenImageIO/detail/fmt/format.h>
-#include <OpenImageIO/detail/fmt/ostream.h>
-#include <OpenImageIO/detail/fmt/printf.h>
+#include <fmt/ostream.h>
+#include <fmt/format.h>
+#include <fmt/printf.h>

 OIIO_PRAGMA_WARNING_POP

diff --git a/src/jpeg2000.imageio/CMakeLists.txt b/src/jpeg2000.imageio/CMakeLists.txt
index 1f47269bf..85b90d66a 100644
--- a/src/jpeg2000.imageio/CMakeLists.txt
+++ b/src/jpeg2000.imageio/CMakeLists.txt
@@ -4,8 +4,7 @@

 if (OPENJPEG_FOUND)
     add_oiio_plugin (jpeg2000input.cpp jpeg2000output.cpp
-                     INCLUDE_DIRS ${OPENJPEG_INCLUDES}
-                     LINK_LIBRARIES ${OPENJPEG_LIBRARIES}
+                     LINK_LIBRARIES OpenJPEG::OpenJPEG
                      DEFINITIONS "-DUSE_OPENJPEG")
 else()
     message (WARNING "Jpeg-2000 plugin will not be built")
diff --git a/src/libOpenImageIO/CMakeLists.txt b/src/libOpenImageIO/CMakeLists.txt
index 456aab81a..eb5bb00fc 100644
--- a/src/libOpenImageIO/CMakeLists.txt
+++ b/src/libOpenImageIO/CMakeLists.txt
@@ -141,10 +141,14 @@ target_link_libraries (OpenImageIO
             $<TARGET_NAME_IF_EXISTS:TBB::tbb>
             ${BZIP2_LIBRARIES}
             ZLIB::ZLIB
-            $<TARGET_NAME_IF_EXISTS:Boost::thread>
+            Boost::filesystem Boost::thread Boost::system Boost::container
             ${CMAKE_DL_LIBS}
         )

+if (OpenCV_FOUND)
+    target_link_libraries (OpenImageIO PUBLIC opencv::opencv_core opencv::opencv_imgproc opencv::opencv_videoio)
+endif ()
+
 if (FREETYPE_FOUND)
     target_link_libraries (OpenImageIO PRIVATE ${FREETYPE_LIBRARIES})
 endif()
diff --git a/src/libutil/CMakeLists.txt b/src/libutil/CMakeLists.txt
index 09b9139d0..a2d39982e 100644
--- a/src/libutil/CMakeLists.txt
+++ b/src/libutil/CMakeLists.txt
@@ -17,8 +17,7 @@ target_link_libraries (OpenImageIO_Util
             ${OPENIMAGEIO_IMATH_DEPENDENCY_VISIBILITY}
             ${OPENIMAGEIO_IMATH_TARGETS}
         PRIVATE
-            $<TARGET_NAME_IF_EXISTS:Boost::filesystem>
-            $<TARGET_NAME_IF_EXISTS:Boost::thread>
+            Boost::filesystem Boost::thread Boost::system
             $<TARGET_NAME_IF_EXISTS:TBB::tbb>
             ${CMAKE_DL_LIBS}
         )
